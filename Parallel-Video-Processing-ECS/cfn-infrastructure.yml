AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "AWS Step Functions and Amazon ECS integration example."

Resources:
  VideoProcessingOuputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  VideoProcessingOuputBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: VideoProcessingOuputBucket
      PolicyDocument:
        Statement:
          - Action: s3:*
            Condition:
              Bool:
                aws:SecureTransport: "false"
            Effect: Deny
            Principal:
              AWS: "*"
            Resource:
              - Fn::GetAtt:
                  - VideoProcessingOuputBucket
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - VideoProcessingOuputBucket
                        - Arn
                    - /*
        Version: "2012-10-17"
  VideoProcessingTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      Description: Role to run an ECS task
  VideoProcessingTaskExecutionRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr-public:BatchCheckLayerAvailability
              - ecr:BatchGetImage
              - ecr-public:GetAuthorizationToken
              - ecr:GetDownloadUrlForLayer
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:ecr:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :*
          - Action:
              - ecr:GetAuthorizationToken
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
          - Action:
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:Describe*
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:ec2:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :*
          - Action:
              - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
              - elasticloadbalancing:DeregisterTargets
              - elasticloadbalancing:Describe*
              - elasticloadbalancing:RegisterInstancesWithLoadBalancer
              - elasticloadbalancing:RegisterTargets
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:elasticloadbalancing:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :*
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - VideoProcessingLogGroup
                - Arn
        Version: "2012-10-17"
      PolicyName: VideoProcessingTaskExecutionRoleDefaultPolicy
      Roles:
        - Ref: VideoProcessingTaskExecutionRole
  VideoProcessingTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      Description: Role assumed by task to perform its function
  VideoProcessingTaskRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: states:*
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:states:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :*
          - Action:
              - ssm:DescribeParameters
              - ssm:GetParameters
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:ssm:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :*
          - Action: kms:Decrypt
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:kms:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :*
          - Action: elasticfilesystem:*
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:elasticfilesystem:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :*
          - Action:
              - s3-object-lambda:*
              - s3:*
            Effect: Allow
            Resource: arn:aws:s3:::*
        Version: "2012-10-17"
      PolicyName: VideoProcessingTaskRoleDefaultPolicy
      Roles:
        - Ref: VideoProcessingTaskRole
  VideoProcessingStateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: states.amazonaws.com
        Version: "2012-10-17"
      Description: Stepfunction execution role
  VideoProcessingStateMachineExecutionRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: iam:PassRole
            Condition:
              StringLike:
                iam:PassedToService: ecs-tasks.amazonaws.com
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - VideoProcessingTaskExecutionRole
                  - Arn
              - Fn::GetAtt:
                  - VideoProcessingTaskRole
                  - Arn
          - Action: ecs:RunTask
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:ecs:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :task-definition/*
          - Action:
              - logs:CreateLogDelivery
              - logs:DeleteLogDelivery
              - logs:DescribeLogGroups
              - logs:DescribeResourcePolicies
              - logs:GetLogDelivery
              - logs:ListLogDeliveries
              - logs:PutResourcePolicy
              - logs:UpdateLogDelivery
              - xray:GetSamplingRules
              - xray:GetSamplingTargets
              - xray:PutTelemetryRecords
              - xray:PutTraceSegments
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: VideoProcessingStateMachineExecutionRoleDefaultPolicy
      Roles:
        - Ref: VideoProcessingStateMachineExecutionRole
  VideoProcessingVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: VideoProcessingStack/VideoProcessing
  VideoProcessingPublicSubnet1SubnetCF88E3BA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VideoProcessingVpc
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.0.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: VideoProcessingStack/VideoProcessing/PublicSubnet1
  VideoProcessingPublicSubnet1RouteTable33F140BD:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VideoProcessingVpc
      Tags:
        - Key: Name
          Value: VideoProcessingStack/VideoProcessing/PublicSubnet1
  VideoProcessingPublicSubnet1RouteTableAssociation2EF579E2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VideoProcessingPublicSubnet1RouteTable33F140BD
      SubnetId:
        Ref: VideoProcessingPublicSubnet1SubnetCF88E3BA
  VideoProcessingPublicSubnet1DefaultRoute6135E204:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VideoProcessingPublicSubnet1RouteTable33F140BD
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VideoProcessingIGW93CEB189
    DependsOn:
      - VideoProcessingVPCGWE9B327E6
  VideoProcessingPublicSubnet1EIP4A5D9973:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: VideoProcessingStack/VideoProcessing/PublicSubnet1
  VideoProcessingPublicSubnet1NATGateway50BE1D81:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: VideoProcessingPublicSubnet1SubnetCF88E3BA
      AllocationId:
        Fn::GetAtt:
          - VideoProcessingPublicSubnet1EIP4A5D9973
          - AllocationId
      Tags:
        - Key: Name
          Value: VideoProcessingStack/VideoProcessing/PublicSubnet1
    DependsOn:
      - VideoProcessingPublicSubnet1DefaultRoute6135E204
      - VideoProcessingPublicSubnet1RouteTableAssociation2EF579E2
  VideoProcessingPublicSubnet2SubnetA901D841:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VideoProcessingVpc
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.64.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: VideoProcessingStack/VideoProcessing/PublicSubnet2
  VideoProcessingPublicSubnet2RouteTableA531FAA5:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VideoProcessingVpc
      Tags:
        - Key: Name
          Value: VideoProcessingStack/VideoProcessing/PublicSubnet2
  VideoProcessingPublicSubnet2RouteTableAssociation0C019377:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VideoProcessingPublicSubnet2RouteTableA531FAA5
      SubnetId:
        Ref: VideoProcessingPublicSubnet2SubnetA901D841
  VideoProcessingPublicSubnet2DefaultRoute6E124B35:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VideoProcessingPublicSubnet2RouteTableA531FAA5
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VideoProcessingIGW93CEB189
    DependsOn:
      - VideoProcessingVPCGWE9B327E6
  VideoProcessingPublicSubnet2EIP939B300B:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: VideoProcessingStack/VideoProcessing/PublicSubnet2
  VideoProcessingPublicSubnet2NATGatewayC1AEAA74:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: VideoProcessingPublicSubnet2SubnetA901D841
      AllocationId:
        Fn::GetAtt:
          - VideoProcessingPublicSubnet2EIP939B300B
          - AllocationId
      Tags:
        - Key: Name
          Value: VideoProcessingStack/VideoProcessing/PublicSubnet2
    DependsOn:
      - VideoProcessingPublicSubnet2DefaultRoute6E124B35
      - VideoProcessingPublicSubnet2RouteTableAssociation0C019377
  VideoProcessingPrivateSubnet1SubnetA8FB5A99:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VideoProcessingVpc
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.128.0/18
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: VideoProcessingStack/VideoProcessing/PrivateSubnet1
  VideoProcessingPrivateSubnet1RouteTableC4DFBB5B:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VideoProcessingVpc
      Tags:
        - Key: Name
          Value: VideoProcessingStack/VideoProcessing/PrivateSubnet1
  VideoProcessingPrivateSubnet1RouteTableAssociation412ED519:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VideoProcessingPrivateSubnet1RouteTableC4DFBB5B
      SubnetId:
        Ref: VideoProcessingPrivateSubnet1SubnetA8FB5A99
  VideoProcessingPrivateSubnet1DefaultRoute4AD384C1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VideoProcessingPrivateSubnet1RouteTableC4DFBB5B
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VideoProcessingPublicSubnet1NATGateway50BE1D81
  VideoProcessingPrivateSubnet2SubnetECDB09A3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VideoProcessingVpc
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.192.0/18
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: VideoProcessingStack/VideoProcessing/PrivateSubnet2
  VideoProcessingPrivateSubnet2RouteTable027F942D:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VideoProcessingVpc
      Tags:
        - Key: Name
          Value: VideoProcessingStack/VideoProcessing/PrivateSubnet2
  VideoProcessingPrivateSubnet2RouteTableAssociationF74D6C85:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VideoProcessingPrivateSubnet2RouteTable027F942D
      SubnetId:
        Ref: VideoProcessingPrivateSubnet2SubnetECDB09A3
  VideoProcessingPrivateSubnet2DefaultRoute2D006746:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VideoProcessingPrivateSubnet2RouteTable027F942D
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VideoProcessingPublicSubnet2NATGatewayC1AEAA74
  VideoProcessingIGW93CEB189:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: VideoProcessingStack/VideoProcessing
  VideoProcessingVPCGWE9B327E6:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VideoProcessingVpc
      InternetGatewayId:
        Ref: VideoProcessingIGW93CEB189
  FunctionECSRoleCreate:
    Type: 'AWS::Serverless::Function'
    Properties:
      InlineCode: |
        // A Lambda function that looks up the ECS Service linked role and creates it if it does not exist.
        var response = require('./cfn-response.js');

        function sleep(ms) {
          return new Promise((resolve) => {
            setTimeout(resolve, ms);
          });
        }

        function send(event, context, responseStatus, responseData, physicalResourceId, noEcho) {
            try {
              const https = require("https");
              const { URL } = require("url");

              const responseBody = {
                Status: responseStatus,
                Reason: "See the details in CloudWatch Log Stream: " + context.logStreamName,
                PhysicalResourceId: context.logStreamName,
                StackId: event.StackId,
                RequestId: event.RequestId,
                LogicalResourceId: event.LogicalResourceId,
                NoEcho: false,
                Data: responseData,
              };
              console.log("Response body:\n", JSON.stringify(responseBody));

              const parsedUrl = new URL(event.ResponseURL);
              const requestOptions = {
                hostname: parsedUrl.hostname,
                port: 443,
                path: parsedUrl.pathname + parsedUrl.search,
                method: "PUT",
                headers: {
                  "content-type": "",
                  "content-length": JSON.stringify(responseBody).length,
                },
              };
              console.log("Request options:\n", JSON.stringify(requestOptions));

              // Send response back to CloudFormation
              return new Promise((resolve, reject) => {
                const request = https.request(requestOptions, function (response) {
                  console.log("Status code: ", response.statusCode);
                  response.on("data", () => {});
                  response.on("end", () => {
                    console.log("Status code: ", response.statusCode);
                    console.log("Status message: ", response.statusMessage);
                    resolve("Success");
                  });
                });
                request.on("error", (e) => {
                  console.error(e);
                  reject("Error");
                });
                request.write(JSON.stringify(responseBody));
                request.end();
              });
            } catch (error) {
              console.error("Error in cfn_response:\n", error);
              return;
            }
          };

        exports.handler = async function(event, context) {
            const { IAMClient, CreateServiceLinkedRoleCommand, GetRoleCommand, NoSuchEntityException } = require("@aws-sdk/client-iam");
            const iamClient = new IAMClient();
            var responseStatus = response.SUCCESS
            var responseData = {};
            if (event.RequestType == "Delete") {
                await send(event, context, responseStatus, responseData);
                return;
            };

            var params = {
              AWSServiceName: 'ecs.amazonaws.com', /* required */
              Description: 'ECS Service Linked Role'
            };
            try {
              const command = new CreateServiceLinkedRoleCommand(params);
              responseData = await iamClient.send(command);
            } catch (createError) {
              // Just logging the error as it does not matter if the role already exists.
              responseData = createError                     
            }
            await sleep(5000)
            console.log(responseData);
            await send(event, context, responseStatus, responseData);
            return;
        };
      Runtime: nodejs18.x
      MemorySize: 1024
      Timeout: 300
      Handler: index.handler
      Policies:
        - Statement:
          - Sid: CreateECSServiceLinkedRole
            Effect: Allow
            Action: iam:CreateServiceLinkedRole
            Resource: "arn:aws:iam::*:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS*"
            Condition:
              StringLike: 
                iam:AWSServiceName: ecs.amazonaws.com
          - Sid: AttachECSServiceLinkPolicy
            Effect: Allow
            Action: 
              - iam:PassRole
              - iam:PutRolePolicy
              - iam:GetRole  
            Resource: "arn:aws:iam::*:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS*"
  CustomResourceECSRoleCreate:
    Type: 'Custom::ECSRoleCreate'
    Properties:
      ServiceToken: !GetAtt FunctionECSRoleCreate.Arn
  VideoProcessingCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: VideoProcessingCluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
    DependsOn: VideoProcessingPrivateSubnet1DefaultRoute4AD384C1
  VideoProcessingTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: "public.ecr.aws/w4a7r2o2/sfw-process-video:latest"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: VideoProcessingLogGroup
              awslogs-stream-prefix: ecs
              awslogs-region:
                Ref: AWS::Region
              mode: non-blocking
          Name: VideoProcessor
      Cpu: "512"
      ExecutionRoleArn:
        Fn::GetAtt:
          - VideoProcessingTaskExecutionRole
          - Arn
      Family: VideoProcessingStackTaskDefinition
      Memory: "4096"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - VideoProcessingTaskRole
          - Arn
  VideoProcessingLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  VideoProcessingSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: VideoProcessingStack/Process Data/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: VideoProcessingVpc
Outputs:
  VideoProcessingCluster:
    Value: !GetAtt VideoProcessingCluster.Arn 
  VideoProcessingTaskDefinition:
    Value: 
      Ref: VideoProcessingTaskDefinition
  VideoProcessingSubnet1:
    Value: 
      Ref: VideoProcessingPrivateSubnet1SubnetA8FB5A99
  VideoProcessingSubnet2:
    Value: 
      Ref: VideoProcessingPrivateSubnet2SubnetECDB09A3
  VideoProcessingOutputBucket:
    Value:
      Ref: VideoProcessingOuputBucket
  VideoProcessingSecurityGroup:
    Value:
      Ref: VideoProcessingSecurityGroup
